--  JCFS Biblioteca
procedure PonerN(veces, color){
/* Proposito:: Colocar "veces" bolitas de color "color" en la celda actual. (ref p3 e11)
	precondiciones: no tiene.
	param: veces denota un numero. color denota un color.*/
  repeat(veces){
		Poner(color);
	}
}

procedure PonerNAl(color, numero, dir){
	/* Pone "numero" bolitas de color "color" en la celda lindante en direccion "dir" dejando el cabezal en la celda actual (ref:p3 e20) 
	precondicion: debe haber tantas celdas como indica "numero" en al "direccion"
	param: color denota color, numero denota un numero y dir denota una direccion */
	Mover(dir)
	repeat(numero){
		Poner(color)
	}
	Mover(opuesto(dir))
}

procedure PonerSi(color, b){
/* Dado un color "color" y un booleano b, pone una bolita de color c en la celda actual si b es True, y no hace nada si este es False. (ref: p4 e13) */
	if (b){
		Poner(color)
	}
}

procedure PonerTodosLosColores(){
	/* Deposita una bolita de cada color en la celda actual. (ref: p3 e15)
	precondicion: no tiene
	param: no tiene. */
	foreach color in [minColor()..maxColor()]{
		Poner(color)
	}
}
procedure SacarN(color, veces){
/* Proposito:: Saca "veces" bolitas de color "color" en la celda actual. (ref: p3 e12)
   Precondicion: Debe haber "veces" bolitas color "color" en la celda actual */
  repeat(veces){
		Sacar(color);
	}
}

procedure SacarSi(color, condicion){
	/* Saca una bolita de color "color" si se cumple la condicion "condicion". (ref: p4 e14)
	precondicion: Debe haber una bolita de color "color". 
	param: color denota un color y condicion denota un booleano. */
	if (condicion){
		Sacar(color)
	}
}

procedure MoverN(direccion, numero){
	/* Mueve el cabezal "numero" celdas al "direccion". 
   Deben haber "numero" celdas en direccion "direccion" */
	repeat(numero){
		Mover(direccion)
	}
}

procedure MoverSi(direccion, condicion){
	/* Mueve el cabezal en doreccion "direccion" si se cumple la condicion "condicion" 
	precondicion: debe haber una celda al "direccion" 
	param: direccion denota una direccion. condicion denota un booleano */
	if (condicion){
		Mover(direccion)
	}
}

procedure SacarTodas(color){
	/* Saca todas las bolitas de color "color" de la celda actual (ref: p3 e13)
	precondicion: no tiene
	param: color denota un color */
	SacarN(color, nroBolitas(color))	
}

/* Pinta una linea "color" en al "direccion" de largo "numero"
	precondicion: debe haber "numero celdas al "direccion" de la celda actual
	param: color denota un color. numero denota un numero. direccion denota una direccion */
procedure LineaNAl(color, numero, direccion){
	repeat(numero){
		Mover(direccion)
		Poner(color)
	}
}	

procedure CopiarBolitasCAl(color, dir){
/* Proposito: copia las bolitas de color "color" a la celda lindante en direccion "dir". El cabezal queda en la celda actual */  
	repeat(nroBolitas(color)){
		Mover(dir)
		Poner(color)
		Mover(opuesto(dir))
	}
}

/* Proposito: Copia las bolitas de la celda actual a la lindante en direccion "dir" 
 Precondicion: Una celda en direccion "dir" 
 param: dir denota una direccion (ref: p3 e20)*/
procedure CopiarCeldaAl(dir){
	foreach color in [minColor()..maxColor()]{
		PonerNAl(color, nroBolitas(color), dir)
	}
}

/*Proposito: copiar la celda actual a las cuatro lindantes
  Precondicion: debe haber celdas lindantes a la actual en los cuatro sentidos (ref: p3 e21)*/
procedure CopiarCeldaALindantes(){
	foreach dir in [minDir()..maxDir()]{
		CopiarCeldaAl(dir)
	}
}
/* Proposito: Copia la celada actual a las ocho adyacentes
  Precondicion: debe haber celdas lindantes a la actual en los cuatro sentidos (ref: p3 e22)*/
procedure CopiarCeldaAAdyacentes(){
	foreach dir in [minDir()..maxDir()]{
		CopiarCeldaAl(dir)
		Mover(dir)
		CopiarCeldaAl(siguiente(dir))
		Mover(opuesto(dir))
	}
}
	


/* Quita "deg" cantidad de bolitas de color "c" si hay mas de "deg" de bolitas de color "c",  si no saca todas las de este color */
procedure DegradarCelda(deg, c){
	if (nroBolitas(c) > deg){
		SacarN(c, deg)
	} else {
		SacarTodas(c)
	}
}


/* Chequea si la celda actual esta vacia, es decir de ningun color. retorna True si lo esta
 precondicion: no tiene
 param: no tiene */
function vacia(){
	return (not ( hayBolitas(Azul) || hayBolitas(Negro) || hayBolitas(Rojo) || hayBolitas(Verde) ) )
}

/* Mueve el cabezal hasta la primer celda color c desde la celda actual hasta el borde en direccion d. Si No encuentra celda con el color c y el cabezal queda en la celda mas al "d" desde la celda actual (ref p6 e3)
 precondicion: no tiene
 param: c denota un color y de denota una direccion */
procedure IrHastaColor(c, d){
	while ( puedeMover(d) && not hayBolitas(c)){
		Mover(d)
	}
}

/* Lleva el cabezal al extremo de la fila (Este u Oeste) o columna (Sur o Norte)
 precondicion: no tiene
 param: d denota una direccion */
procedure IrAlExtremo(d){
	while ( puedeMover(d) ) {
		Mover(d)
	}
}

/* Recibe dos direcciones d1 y d2 y mueve el cabezal al inicio del recorrido. En otras palabras, el cabezal se mueve al extremo opuesto(d1) + opuesto(d2)  (ref: p6 e10)
 precondicion: no tiene 
 param: d1 y d2 denotan direcciones (opuestas a lo esperado)*/
procedure IrAlInicioT(d1, d2){
	IrAlExtremo(opuesto(d1))
	IrAlExtremo(opuesto(d2))
}

/* Posiciona el cabezal en el origen del tablero (ref: p6 e6)
	precondicon: no tiene 
	param: no tiene */
procedure IrAlOrigen(){
	IrAlExtremo(Oeste)
	IrAlExtremo(Sur)
}
function puedeMoverT(d1, d2){
	return ( puedeMover(d1) || puedeMover(d2) )
}

/* Precondicion: debe haber una celda en direccion d2 o d1 */
procedure MoverT(d1, d2){
	if (puedeMover(d1)){
		Mover(d1)
	}else{
		IrAlExtremo(opuesto(d1))
		Mover(d2)
	}
}
/* retorna el valor en valueTrue si se cumple la condicion bool como verdadra, en caso contrario devuelve el valor en valueFalse */
function ifElse(bool, valueTrue, valueFalse){
	value := valueFalse
	if (bool){
		value := valueTrue
	}
	return (value)
}

procedure IrANesimaVacia(n){
	/* Mueve el cabezal hasta la n esima celda vacia del tablero respecto a la celda inicial (Sur-Oeste) y recorriendo el tablero en direccion Noret Este, si no la encuentra queda en la ultima */ 
	vacias_vistas := 0
	IrAlInicioT(Norte, Este)
	vacias_vistas := ifElse(vacia(), vacias_vistas + 1, vacias_vistas)
	while ( puedeMoverT(Norte, Este) && n /= vacias_vistas ){
		MoverT(Norte,Este)
		vacias_vistas := ifElse(vacia(), vacias_vistas + 1, vacias_vistas)
	}
}

function menor(v1, v2){
	/* proposito: denota el menor valor entre v1 y v2.
	precond: v1 y v2 deben denotar el mismo tipo de valores 
	param: v1 y v2 valores a comparar. */
	menor := v1
	if (v1 > v2){
		menor := v2
	}
	return (menor)
}

function mayor(v1, v2){
	/* proposito: denota el mayor valor entre v1 y v2.
	precond: v1 y v2 deben denotar el mismo tipo de valores 
	param: v1 y v2 valores a comparar. */
	mayor := v1
	if (v1 < v2){
		mayor := v2
	}
	return (mayor)
}

/* Limpia la Celda actual 
 precondicion: no tiene 
 param: no tiene (ref: p3 e16)*/
procedure LimpiarCelda(){
	foreach c in [minColor()..maxColor()]{
		SacarTodas(c)
	}
}
	
/* Limpia el Tablero . Usa la funcion LimpiarCelda() 
	precondiciones: no tiene
	param: no tiene */
procedure LimpiarTablero(){
	IrAlInicioT(Norte, Este)
	while (puedeMoverT(Norte, Este)){
		LimpiarCelda()
		MoverT(Norte, Este)
	}
	LimpiarCelda()
}

function nroBolitasAl(c, dir){
	Mover(dir)
	return(nroBolitas(c))
}

function singularSi(bool, elemento){
  return ( ifElse(bool, [elemento], []) )
}

function nroCeldasAl(dir){
	/* cuenta las celdas en la direccion dir hasta el borde no incluy la actual.
	prerequisitos: ninguno
	param: dir es una direccion*/
	total_celdas := 0
	while ( puedeMover(dir) ){
		total_celdas := total_celdas + 1
		Mover(dir)
	}
	return ( total_celdas )
}

function coordenadaX(){
	/* denota la coor Y de la celda actual es decir, la cantidad de columnas desde la celda actual hasta el borde izquierdo u Oeste del tablero */
	return (nroCeldasAl(Oeste))
}

function coordenadaY(){
	/* denota la coor Y de la celda actual es decir, la cantidad de filas desde la celda actual hasta el borde inferior o Sur del tablero */
	return (nroCeldasAl(Sur))
}
-- denota una lista con n repeticiones de x. si n <=0 retorna una lista vacia e9
function repeticion(n , x){
  lista := []
  repeat(n){
    lista := lista ++ [x]
    }
  return (lista)
}

-- denota la suma de todos los numeros de una lista e10
-- 
function sumatoria(ls){
  sumatoria := 0
  foreach n in ls{
    sumatoria := sumatoria + n
  }
  return (sumatoria)
}

-- denota la lista dada invertida e11
function reverso(ls){
  lista_salida := []
  foreach elemento in ls{
    lista_salida := [elemento] ++ lista_salida
  }
  return(lista_salida)
}

-- denota la longitud de la lista e12
function longitud(lista_entrada){
  longitud := 0
  foreach elemento in lista_entrada{
    longitud := longitud + 1
  }
  return(longitud)
}

-- denota una lista con los elementos opuestos de la lista de entrada e13
-- prec: la lista_entrada debes ser del tipo numero o direccion
function opuestos(lista_entrada){
  lista_salida := []
  foreach elemento in lista_entrada{
    lista_salida := lista_salida ++ [opuesto(elemento)]
  }
  return(lista_salida)
}

-- denota una lista ,que dada  ls y un numero m, con los elementos de la lista original m veces e14
function multiplicacionLista(ls, m){
  lista_salida := []
  repeat(m){
    lista_salida := aniadir(lista_salida, ls)
  }
  return(lista_salida)
}

-- denota la lista_entrada con los elementos de ls añadidos
function aniadir(lista_entrada, ls){
  lista_salida := lista_entrada
    foreach elemento in ls{
      lista_salida := lista_salida ++ [elemento]
    }
  return(lista_salida)
}

-- denota una lista en que cada elemento de lista_entrada aparece repetido m veces e15
function multiplicacionInterna(lista_entrada, m){
  lista_salida := []
  foreach elemento in lista_entrada{
    lista_salida := lista_salida ++ repeticion(m, elemento)
  }
  return(lista_salida)
}

-- denota 
/* e16
Escribir la función sumatoriaVecinos que, dada una lista ns = [n 1 , . . . , n k ], retorne la lista ms = [m 2 , . . . , m k−1 ] tal que m i es la suma de n i−1 , n i y n i+1 .  Ejemplo: sumatoriaVecinos([1, 2, 3, 4]) retorna [6, 9] (i.e. [1+2+3, 2+3+4]). Notar que ms tiene dos elementos menos que ns.
*/
--prec : la lista debe ser del tipo numeros

function sumatoriaVecinos(ns){
  ms := []
  lista := ns
  repeat(longitud(ns)-2){
    ms := ms ++ [sumatoria(vecinos(lista))]
    lista := tail(lista)
  }
  return(ms)
}

-- denota una lista con los tres primeros elementos de la lista ls
-- prec : la lista debe tener al menos tres elementos
function vecinos(ls){
	return([head(ls)] ++ [head(tail(ls))] ++ [head(tail(tail(ls)))] )
}

-- denota una lista con los elementos de ls pero sin e entre sus elementos e17
function sinElemento(ls, e){
  lista_salida := []
  foreach elemento in ls{
    lista_salida := lista_salida ++ ifElse(elemento==e, [], [elemento])
  }
  return(lista_salida)
}


-- denota una lista con los numeros pares en la lista de entrada p9 e18
function pares(ls){
	lista_salida := []
	foreach n in ls{
		lista_salida := lista_salida ++ ifElse(esPar(n), [n], [])
	}
	return (lista_salida)
}

-- denota un booleano indicando si el numero ingresado es par auxiliar ej18
function esPar(n){
	return( (n mod 2 == 0) )
}

-- denota la lista resultante de quitar todos los numero internos e19
function reduccionBloques(ls){
	lista_salida := [head(ls)]
	foreach n in ls{
		lista_salida := lista_salida ++ ifElse(n /= last(lista_salida), [n], [])
	}
	return(lista_salida)
}

-- denota una lista con los elementos de ambas listas de entrada intercalados e20
-- prec: ambas listas deben tener la misma longitud y el mismo tipo
function zipI(ls1, ls2){
	lista1 := ls1
	lista_salida := []
	foreach e in ls2{
		lista_salida := lista_salida ++ [head(lista1)] ++ [e]
		lista1 := tail(lista1)
	}
	return(lista_salida)
}

-- denota una lista con los elementos de ambas listas de entrada intercalados e21
-- prec: ambas listas deben tener  el mismo tipo 
function zip(ls1, ls2){
	lista1 := ls1
	lista2 := ls2
	lista_salida := []
	while (not isEmpty(lista1) || not isEmpty(lista2)) {
		if (not isEmpty(lista1)){
			lista_salida := lista_salida ++ [head(lista1)]
			lista1 := tail(lista1)
		}
		if (not isEmpty(lista2)){
			lista_salida := lista_salida ++ [head(lista2)]
			lista2 := tail(lista2)
		}

	}
	return(lista_salida)
}

-- e22 denota una lista sin los elementos en posiciones pares
function unzipPares(ls){
	lista_salida := []
	lista_entrada := ls
	while (not isEmpty(lista_entrada)){
		lista_salida := lista_salida ++ [head(lista_entrada)]
		lista_entrada := tail(lista_entrada)
--		lista_entrada := ifElse(not isEmpty(lista_entrada), tail(lista_entrada), [])
		if (not isEmpty(lista_entrada)){
			lista_entrada := tail(lista_entrada)
		}
		
	}
	return(lista_salida)
}

-- Ej Adicionales
-- denota bool en tanto el elemento e pertenesca a la lista xs e23
function pertenece(e, ls){
	pertenece := False
	foreach elemento in ls{
		pertenece := pertenece || (elemento == e)
	} 
	return (pertenece)
}

-- denota una lista sin elementos repetidos desde la lista ls e24
function sinDuplicados(ls){
	lista_salida := []
	foreach e in ls{
		lista_salida := lista_salida ++ ifElse(pertenece(e, lista_salida), [], [e]) 
	}
	return(lista_salida)
}

-- denota la lista union de dos listas que contienen todos los elementos no repetidos que aparecen en alguno de ls o ms e25
-- prec: ls y ms son listas sin elementos repetidos (???)
function union(ls, ms){
	return ( sinDuplicados(ls ++ ms) )
}

-- denota la interseccion de dos listas que no contienen elementos repetidos, esto es los todos los elementos que aparesen tanto en ls como en ms e26
-- prec: ls y ms son listas sin elementos repetidos 
function interseccion(ls, ms){
	lista_salida := []
	foreach e in ls{
		lista_salida := lista_salida ++ ifElse(pertenece(e, ms), [e], [])
	}
	return (lista_salida)
}

-- incluye e27, denota bool si una lista se encuentra contenida en la primera
function incluye(xs, ys){
	incluye := True
	foreach e in ys{
		incluye := incluye && pertenece(e, xs)
	}
	return (incluye)
	-- return ( interseccion(xs, ys) == ys ) -- esto no funca si el orden de la lista no es el mismo... obvio
}

-- denota bool si la lista esta ordenada de menor a mayor e28
-- prec: la lista no debe estar vacia
function ordenada(ls){
	lista_entrada := tail(ls)
	elemento := head(ls)
	while ( not isEmpty(lista_entrada) && elemento < head(lista_entrada)){
		elemento := head(lista_entrada)
		lista_entrada := tail(lista_entrada)
	}
	return( isEmpty(lista_entrada) )
}

-- denota el minimo elemento de la lista entrada e29
-- prec: ???
function minimo(ls){
	menor := head(ls)
	foreach e in ls{
		menor := ifElse(menor > e, e, menor)
	}
	return(menor)
}

-- e30 denota la lista de entrada sin la primer aparicion del minimo de la lista
function sacarMinimo(ls){
	return( sinPrimerAparicion(ls, minimo(ls)))
}

-- e30 secundaria sin primera aparicion
-- denota la lista sin la primera aparicion de e
function sinPrimerAparicion(ls, e){
	lista_entrada := ls
	lista_salida := []
	while (head(lista_entrada) /= e){
		lista_salida := lista_salida ++ [head(lista_entrada)]
		lista_entrada := tail(lista_entrada)
	}
	return( lista_salida ++ tail(lista_entrada))
}

-- e31 denota la lista dada ordenada de menor a mayor
function ordenacion(ls){
	lista_salida := []
	lista_entrada := ls
	while (not isEmpty(lista_entrada)){
		lista_salida := lista_salida ++ [minimo(lista_entrada)]
		lista_entrada := sacarMinimo(lista_entrada)
	}
	return(lista_salida)
}

-- e32 denota una lista de listas que agrupa los elementos de xs en grupos de n elementos
function agrupar(xs, n){
	lista_entrada := xs
	lista_salida := []
	while (not isEmpty(lista_entrada) ){
		lista_particion := partir(lista_entrada, n)
		lista_cabeza := head(lista_particion)
		lista_salida := lista_salida ++ [lista_cabeza]
		lista_entrada := last(lista_particion)
	}	
	return (lista_salida)
}

-- denota una lista con dos listas , la primera con los n primeros elementos de la lista dada si no tiene los elementos denotas tantos como pueda la segunda con el remanente de la lista original depues de quitarle los n primeros elementos
function partir(ls, n){
	lista_entrada := ls
	lista_salida := []
	while (not isEmpty(lista_entrada) && longitud(lista_salida) /= n){
		lista_salida := lista_salida ++ [head(lista_entrada)]
		lista_entrada := tail(lista_entrada)
	}
	return([lista_salida, lista_entrada])
}

-- e33 denota la concatenacion de los elementos en las listas de las lista dada
-- prec: xs debe no ser vacia
function desagrupar(xs){
	lista_salida := head(xs)
	foreach lista in tail(xs){
		lista_salida := concatenar(lista_salida, lista)
	}
	return (lista_salida)
}

-- denota una lista con los elementos de ambas listas
function concatenar(ls,ms){
	lista_salida := ls
	foreach e in ms{
		lista_salida := lista_salida ++ [e]
	}
	return (lista_salida)
}

