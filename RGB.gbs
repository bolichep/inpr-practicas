/* Colores que se pueden usar en la pantalla */
function c_aguamarina() {
	return (pixel(0,1,1,1))
}

function c_amarillo() {
	return (pixel(1,1,0,0))
}

function c_azul() {
	return (pixel(0,0,1,0))
}

function c_blanco() {
	return (pixel(1,1,1,0))
}

function c_cian() {
	return (pixel(0,1,1,0))
}

function c_gris_claro() {
	return (pixel(1,1,1,1))
}

function c_gris_oscuro() {
	return (pixel(0,0,0,0))
}

function c_magenta() {
	return (pixel(1,0,1,0))
}

function c_marron() {
	return (pixel(1,0,0,1))
}

function c_naranja() {
	return (pixel(1,1,0,1))
}

function c_negro() {
	return (pixel(0,0,0,1))
}

function c_nautico() {
	return (pixel(0,0,1,1))
}

function c_purpura() {
	return (pixel(1,0,1,1))
}

function c_rojo() {
	return (pixel(1,0,0,0))
}

function c_verde_claro() {
	return (pixel(0,1,0,0))
}

function c_verde_oscuro() {
	return (pixel(0,1,0,1))
}

/* Imagen para realizar pruebas */
function imagen1() {
	return ([
		// col 1
		  c_blanco()
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		// col 2
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		// col 3
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_rojo() 
		, c_naranja() 
		, c_naranja() 
		, c_naranja() 
		, c_blanco()
		, c_blanco()
		, c_marron()
		// col 4
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_marron()
		, c_marron()
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_rojo() 
		, c_rojo() 
		, c_naranja() 
		, c_naranja() 
		, c_naranja() 
		, c_blanco()
		, c_marron()
		, c_marron()
		// col 5
		, c_blanco()
		, c_rojo() 
		, c_marron()
		, c_naranja() 
		, c_naranja() 
		, c_marron()
		, c_blanco()
		, c_rojo() 
		, c_rojo() 
		, c_rojo() 
		, c_rojo() 
		, c_naranja() 
		, c_azul() 
		, c_azul() 
		, c_marron()
		, c_marron()
		// col 6
		, c_rojo() 
		, c_rojo() 
		, c_marron()
		, c_marron()
		, c_marron()
		, c_naranja() 
		, c_naranja() 
		, c_rojo() 
		, c_rojo() 
		, c_rojo() 
		, c_azul() 
		, c_azul() 
		, c_azul() 
		, c_azul() 
		, c_marron()
		, c_marron()
		// col 7
		, c_rojo() 
		, c_rojo() 
		, c_marron()
		, c_naranja() 
		, c_marron()
		, c_naranja() 
		, c_naranja() 
		, c_azul() 
		, c_azul() 
		, c_azul() 
		, c_amarillo() 
		, c_azul() 
		, c_azul() 
		, c_azul() 
		, c_blanco()
		, c_blanco()
		// col 8
		, c_rojo() 
		, c_rojo() 
		, c_naranja()
		, c_naranja() 
		, c_naranja()
		, c_naranja() 
		, c_naranja() 
		, c_rojo() 
		, c_rojo() 
		, c_azul() 
		, c_azul() 
		, c_azul() 
		, c_azul() 
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		// col 9
		, c_rojo() 
		, c_rojo() 
		, c_naranja()
		, c_naranja() 
		, c_naranja()
		, c_naranja() 
		, c_naranja() 
		, c_rojo() 
		, c_rojo() 
		, c_azul() 
		, c_azul() 
		, c_azul() 
		, c_azul() 
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		// col 10
		, c_rojo() 
		, c_rojo() 
		, c_negro()
		, c_negro()
		, c_naranja() 
		, c_negro()
		, c_naranja() 
		, c_azul() 
		, c_azul() 
		, c_azul() 
		, c_amarillo() 
		, c_azul() 
		, c_azul() 
		, c_azul() 
		, c_blanco()
		, c_blanco()
		// col 11
		, c_blanco() 
		, c_rojo() 
		, c_naranja()
		, c_naranja()
		, c_negro()
		, c_negro() 
		, c_naranja() 
		, c_rojo() 
		, c_rojo() 
		, c_rojo() 
		, c_azul() 
		, c_azul() 
		, c_azul() 
		, c_azul() 
		, c_marron()
		, c_marron()
		// col 12
		, c_blanco()
		, c_rojo() 
		, c_blanco()
		, c_naranja() 
		, c_naranja() 
		, c_negro()
		, c_blanco()
		, c_rojo() 
		, c_rojo() 
		, c_rojo() 
		, c_rojo() 
		, c_naranja() 
		, c_azul() 
		, c_azul() 
		, c_marron()
		, c_marron()
		// col 13
		, c_blanco()
		, c_rojo()
		, c_blanco()
		, c_naranja()
		, c_naranja()
		, c_negro()
		, c_blanco()
		, c_blanco()
		, c_rojo() 
		, c_rojo() 
		, c_naranja() 
		, c_naranja() 
		, c_naranja() 
		, c_blanco()
		, c_marron()
		, c_marron()
		// col 14
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_naranja() 
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_rojo() 
		, c_naranja() 
		, c_naranja() 
		, c_naranja() 
		, c_blanco()
		, c_blanco()
		, c_marron()
		// col 15
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		// col 16
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
		, c_blanco()
		, c_blanco() 
		, c_blanco()
	])
}

/* Imagen para pruebas, comprimida */
function imagen1_comprimida() {
	return ([
		  [[41], c_blanco()]
		, [[1], c_rojo()]
		, [[3], c_naranja()]
		, [[2], c_blanco()]
		, [[1], c_marron()]
		, [[3], c_blanco()]
		, [[2], c_marron()]
		, [[3], c_blanco()]
		, [[2], c_rojo()]
		, [[3], c_naranja()]
		, [[1], c_blanco()]
		, [[2], c_marron()]
		, [[1], c_blanco()]
		, [[1], c_rojo()]
		, [[1], c_marron()]
		, [[2], c_naranja()]
		, [[1], c_marron()]
		, [[1], c_blanco()]
		, [[4], c_rojo()]
		, [[1], c_naranja()]
		, [[2], c_azul()]
		, [[2], c_marron()]
		, [[2], c_rojo()]
		, [[3], c_marron()]
		, [[2], c_naranja()]
		, [[3], c_rojo()]
		, [[4], c_azul()]
		, [[2], c_marron()]
		, [[2], c_rojo()]
		, [[1], c_marron()]
		, [[1], c_naranja()]
		, [[1], c_marron()]
		, [[2], c_naranja()]
		, [[3], c_azul()]
		, [[1], c_amarillo()]
		, [[3], c_azul()]
		, [[2], c_blanco()]
		, [[2], c_rojo()]
		, [[5], c_naranja()]
		, [[2], c_rojo()]
		, [[4], c_azul()]
		, [[3], c_blanco()]
		, [[2], c_rojo()]
		, [[5], c_naranja()]
		, [[2], c_rojo()]
		, [[4], c_azul()]
		, [[3], c_blanco()]
		, [[2], c_rojo()]
		, [[2], c_negro()]
		, [[1], c_naranja()]
		, [[1], c_negro()]
		, [[1], c_naranja()]
		, [[3], c_azul()]
		, [[1], c_amarillo()]
		, [[3], c_azul()]
		, [[3], c_blanco()]
		, [[1], c_rojo()]
		, [[2], c_naranja()]
		, [[2], c_negro()]
		, [[1], c_naranja()]
		, [[3], c_rojo()]
		, [[4], c_azul()]
		, [[2], c_marron()]
		, [[1], c_blanco()]
		, [[1], c_rojo()]
		, [[1], c_blanco()]
		, [[2], c_naranja()]
		, [[1], c_negro()]
		, [[1], c_blanco()]
		, [[4], c_rojo()]
		, [[1], c_naranja()]
		, [[2], c_azul()]
		, [[2], c_marron()]
		, [[1], c_blanco()]
		, [[1], c_rojo()]
		, [[1], c_blanco()]
		, [[2], c_naranja()]
		, [[1], c_negro()]
		, [[2], c_blanco()]
		, [[2], c_rojo()]
		, [[3], c_naranja()]
		, [[1], c_blanco()]
		, [[2], c_marron()]
		, [[4], c_blanco()]
		, [[1], c_naranja()]
		, [[4], c_blanco()]
		, [[1], c_rojo()]
		, [[3], c_naranja()]
		, [[2], c_blanco()]
		, [[1], c_marron()]
		, [[32], c_blanco()]
	])
}

/* Programas de prueba */

-- Ejercicio 1

function pixel(r, g, b, i){
	return([r, g, b, i])
}
function red(pixel){
	return (head(pixel))
}
function green(pixel){
	return (head(tail(pixel)))
}
function blue(pixel){
	return (last(init(pixel)))
}
function intensity(pixel){
	return (last(pixel))
}
/*
program {
	b := c_blanco()
	return(red(b) == 1, green(b) == 1, blue(b) == 1, intensity(b) == 0)
}
/**/
/*
program {
	b := c_rojo()
	return(red(b) == 1, green(b) == 0, blue(b) == 0, intensity(b) == 0)
}
/**/

-- Ejercicio 2
procedure PrenderPixel(pixel){
	LimpiarCelda()
	PonerSi(Rojo, red(pixel) == 1)
	PonerSi(Verde, green(pixel) == 1)
	PonerSi(Azul, blue(pixel) == 1)
	PonerSi(Negro, intensity(pixel) == 1)
}

procedure PintarPantalla(pixel){
	IrAlInicioT(Norte, Este)
	while (puedeMoverT(Norte, Este)){
		PrenderPixel(pixel)
		MoverT(Norte, Este)
	}
	PrenderPixel(pixel)
}
/*
program {
	PrenderPixel(c_rojo())
	Mover(Norte)
	PrenderPixel(c_azul())
}

--*/

/*
program {
	-- ColorAPantalla(c_cian())
	PintarPantalla(c_cian())
}
--*/

-- Ejercicio 3
-- prec: imagenData debe tener tantas jejejeje
-- imagenData es una lista de pixeles
procedure ImagenAPantalla(imagenData){ 
		idata := imagenData
		IrAlInicioT(Sur, Este)
		while (puedeMoverT(Sur, Este)){
			PrenderPixel(head(idata))
			idata := tail(idata)
			MoverT(Sur, Este)
		}
		PrenderPixel(head(idata))
}

/*
program {
	ImagenAPantalla(imagen1())
}
--*/

-- Ejercicio 4
-- Que dado un pixel, transforma dicho pixel en otro, el cual puede ser blanco, negro,
-- gris claro, o gris oscuro.
function en_gris(pixel){
	pixel_gris := pixel
	if (pixel /= c_gris_claro() && pixel /= c_gris_oscuro() && pixel /= c_blanco() && pixel /= c_negro()){
		pixel_gris := [ intensity(pixel), intensity(pixel), intensity(pixel), intensity(pixel) ]
	}
	return (pixel_gris)
}

function escala_de_grises(imagenData){
		iGris := []
		foreach pixel in imagenData{
			iGris := iGris ++ [en_gris(pixel)]
		}
		return(iGris)
}
/*
program {
	ImagenAPantalla(escala_de_grises(imagen1()))
}
--*/

-- Ejercicio 5
function comprimir0(imagenData){
	last_color := head(imagenData)
	last_count := 1
	i_comprimida := []
	foreach pixel in tail(imagenData){
		if (last_color == pixel){
			last_count := last_count + 1
		}	else { 
			i_comprimida := i_comprimida ++ [[[last_count], last_color]]
			last_color := pixel
			last_count := 1
		}
	}
	return (i_comprimida ++ [[[last_count], last_color]])
}


function comprimir(imagenData){
	[a,a,a,b,b,c,b,b,a]
	[[a,a,a],[b,b],[c],[b,b],[a]]	
	[[a],[b],[c],[b],[a]]
}

program {
	return(comprimir(imagen1()), imagen1_comprimida(), comprimir(imagen1()) == imagen1_comprimida())
}
--*/
/*
program {
	return(descomprimir(imagen1_comprimida()) == imagen1())
}
*/

-- Ejercicio 6
/*
program {
	return(tamanho(imagen1()) == 256)
}
*/
/*
program {
	return(cantColores(imagen1()) == 7)
}
*/
/*
program {
	return(coloresDominantes_(imagen1()) == [c_blanco(), c_naranja()])
}
*/

