-- denota una lista con n repeticiones de x. si n <=0 retorna una lista vacia 
function repeticion(n , x){
  lista := []
  repeat(n){
    lista := lista ++ [x]
    }
  return (lista)
}

-- denota la suma de todos los numeros de una lista
-- 
function sumatoria(ls){
  sumatoria := 0
  foreach n in ls{
    sumatoria := sumatoria + n
  }
  return (sumatoria)
}

-- denota la lista dada invertida
function reverso(ls){
  lista_salida := []
  foreach elemento in ls{
    lista_salida := [elemento] ++ lista_salida
  }
  return(lista_salida)
}

-- denota la longitud de la lista
function longitud(lista_entrada){
  longitud := 0
  foreach elemento in lista_entrada{
    longitud := longitud + 1
  }
  return(longitud)
}

-- denota una lista con los elementos opuestos de la lista de entrada
-- prec: la lista_entrada debes ser del tipo numero o direccion
function opuestos(lista_entrada){
  lista_salida := []
  foreach elemento in lista_entrada{
    lista_salida := lista_salida ++ [opuesto(elemento)]
  }
  return(lista_salida)
}

-- denota una lista ,que dada  ls y un numero m, con los elementos de la lista original m veces
function multiplicacionLista(ls, m){
  lista_salida := []
  repeat(m){
    lista_salida := aniadir(lista_salida, ls)
  }
  return(lista_salida)
}

-- denota la lista_entrada con los elementos de ls aÃ±adidos
function aniadir(lista_entrada, ls){
  lista_salida := lista_entrada
    foreach elemento in ls{
      lista_salida := lista_salida ++ [elemento]
    }
  return(lista_salida)
}

-- denota una lista en que cada elemento de lista_entrada aparece repetido m veces
function multiplicacionInterna(lista_entrada, m){
  lista_salida := []
  foreach elemento in lista_entrada{
    lista_salida := lista_salida ++ repeticion(m, elemento)
  }
  return(lista_salida)
}

-----
program{
  lista := [1, 2, 5, 9]
  -- lista := [Rojo, Negro, Azul]
  return (lista, multiplicacionInterna(lista, 3))
}

